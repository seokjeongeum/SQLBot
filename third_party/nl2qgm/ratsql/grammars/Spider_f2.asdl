-- Assumptions:
--   1. sql is correct
--   2. only table name has alias
--   3. only one intersect/union/except

module Spider
{
    val = Number(object f)
        | String(string s)
        | ValSql(sql s)
        | ColUnit(col_unit c)
        | Terminal

    col_unit = (
      agg_type agg_id,
      column col_id,
      singleton is_distinct
    )

    val_unit = Column(col_unit col_unit1)
             | Minus(col_unit col_unit1, col_unit col_unit2)
             | Plus(col_unit col_unit1, col_unit col_unit2)
             | Times(col_unit col_unit1, col_unit col_unit2)
             | Divide(col_unit col_unit1, col_unit col_unit2)
    table_unit = TableUnitSql(sql s)
               | Table(table table_id)

    cond = And(cond left, cond right)
         | Or(cond left, cond right)
         | Not(cond c)
         | Between(val_unit val_unit, val val1, val val2)
         | Eq(val_unit val_unit, val val1)
         | Gt(val_unit val_unit, val val1)
         | Lt(val_unit val_unit, val val1)
         | Ge(val_unit val_unit, val val1)
         | Le(val_unit val_unit, val val1)
         | Ne(val_unit val_unit, val val1)
         | In(val_unit val_unit, val val1)
         | Like(val_unit val_unit, val val1)

    sql = (
      select select,
      from from,
      sql_where sql_where,
      sql_groupby sql_groupby,
      sql_orderby sql_orderby,
      sql_ieu sql_ieu,
    )

    sql_where = (
      cond? where,
    )

    sql_groupby = (
      col_unit* group_by,
      cond? having,
    )

    sql_orderby = (
      order_by? order_by,
      int? limit,
    )

    sql_ieu = (
      sql? intersect,
      sql? except,
      sql? union,
    )
        
    select = (singleton is_distinct, agg* aggs)
    agg = (agg_type agg_id, val_unit val_unit)
    from = (table_unit* table_units, cond? conds)
    order_by = (order order, val_unit* val_units)
    agg_type = NoneAggOp | Max | Min | Count | Sum | Avg
    order = Asc | Desc
}
